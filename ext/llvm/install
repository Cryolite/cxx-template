#!/usr/bin/env bash

set -euo pipefail

script_dir="$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")"
. "$(readlink -e "$script_dir/../../bin/common.sh")"

program_name=ext/llvm/install

function print_usage ()
{
  cat <<'EOF'
Usage: install [OPTION]...
Install LLVM.

  --version=<VERSION>        The version of LLVM to install. Default to the
                             latest release version.
  --prefix=<PREFIX>          Pass `--prefix=<PREFIX>' on to LLVM `configure'
                             script (mandatory).
  --source-dir=<DIR>         The path to the source directory. Default to
                             `<PREFIX>/src/llvm'.
  -h, --help                 Display this help and exit.
EOF
}

if getopt -T; (( $? != 4 )); then
  die_with_runtime_error "$program_name" "\`getopt' is not an enhanced version."
fi
opts="$(getopt -n "$program_name" -l version:,prefix:,source-dir:,help -- h "$@")"
eval set -- "$opts"

while (( $# > 0 )); do
  arg="$1"
  shift
  case "$arg" in
  --version)
    if (( $# == 0 )); then
      die_with_logic_error "$program_name"
    fi
    version="$1"
    shift
    ;;
  --prefix)
    if (( $# == 0 )); then
      die_with_logic_error "$program_name"
    fi
    prefix="$1"
    shift
    ;;
  --source-dir)
    if (( $# == 0 )); then
      die_with_logic_error "$program_name"
    fi
    source_dir="$1"
    shift
    ;;
  -h|--help)
    set +x
    print_usage
    exit 0
    ;;
  --)
    if (( $# > 0 )); then
      die_with_user_error "$program_name" "An invalid argument \`$1'."
    fi
    break
    ;;
  *)
    die_with_user_error "$program_name" "An invalid argument \`$arg'."
    ;;
  esac
done

cmake_options=()

if [[ ! -v version ]]; then
  version="$(git ls-remote --tag 'https://github.com/llvm/llvm-project.git'             \
               | grep -Eo 'refs/tags/llvmorg-[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$' \
               | grep -Eo '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+'                    \
               | LANG=C.UTF-8 sort -Vu                                                  \
               | tail -n 1)"                                                            \
    || die_with_runtime_error "$program_name" "Failed to guess the latest version of LLVM."
  if [[ ! $version =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then
    die_with_runtime_error "$program_name" "Failed to guess the latest version of LLVM."
  fi
fi
if [[ ! $version =~ ^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$ ]]; then
  die_with_user_error "$program_name" "$version: An invalid value for the \`--version' option."
fi

if [[ ! -v prefix ]]; then
  die_with_user_error "$program_name" "The \`--prefix' option is mandatory."
fi
prefix="$(readlink -m "$prefix")"

if [[ ! -v source_dir ]]; then
  source_dir="$prefix/src/llvm"
fi
source_dir="$(readlink -m "$source_dir")"
if [[ -e $source_dir ]]; then
  die_with_runtime_error "$program_name" "$source_dir: A file already exists."
fi

source_dir_prefix="$(dirname "$source_dir")"
source_dir_basename="$(basename "$source_dir")"
mkdir -p "$source_dir_prefix" \
  || die_with_runtime_error "$program_name" "$source_dir_prefix: Failed to create a directory."
(cd "$source_dir_prefix" && git clone 'https://github.com/llvm/llvm-project.git' "$source_dir_basename") \
  || die_with_runtime_error "$program_name" "Failed to \`git clone' the LLVM repository."
(cd "$source_dir" && git checkout -b "$version" "refs/tags/llvmorg-$version") \
  || die_with_runtime_error "$program_name" "Failed to \`git checkout' the branch of the LLVM repository."

if [[ ! -e "$prefix/bin/gcc" ]]; then
  die_with_runtime_error "$program_name" "$prefix/bin/gcc: No such executable exists."
fi
if [[ ! -e "$prefix/bin/g++" ]]; then
  die_with_runtime_error "$program_name" "$prefix/bin/g++: No such executable exists."
fi

cmake_options+=("-DCMAKE_C_COMPILER=$prefix/bin/gcc"
                "-DCMAKE_CXX_COMPILER=$prefix/bin/g++"
                "-DCMAKE_BUILD_TYPE:STRING=Release"
                "-DCMAKE_INSTALL_PREFIX=$prefix"
                "-DLLVM_ENABLE_PROJECTS=clang;libcxx;libcxxabi;compiler-rt")

temp_dir="$(mktemp -d)" \
  || die_with_runtime_error "$program_name" "Failed to create a temporary directory."
push_rollback_command "rm -rf \"$temp_dir\""

build_dir="$temp_dir/build"
mkdir "$build_dir" || die_with_runtime_error "$program_name" "$build_dir: Failed to create a directory."
(cd "$build_dir" && cmake ${cmake_options[@]+"${cmake_options[@]}"} "$source_dir/llvm") \
  || die_with_runtime_error "$program_name" "Failed to \`cmake' LLVM."

make_options=()
if [[ ! -v MAKEFLAGS ]]; then
  # Check whether this script is (directly or indirectly) called from `make`.
  # If this script is called from `make`, it is expected to control concurrency
  # of `make`. Otherwise, this script should control concurrency of
  # `make` as follows.
  make_options+=(-j "$(nproc)")
fi
(cd "$build_dir" && make ${make_options[@]+"${make_options[@]}"}) \
  || die_with_runtime_error "$program_name" "Failed to \`make' LLVM."

(cd "$build_dir" && make install) \
  || die_with_runtime_error "$program_name" "Failed to \`make install' LLVM."
